{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { MustMatch } from '@app/_helpers';\nlet AddEditComponent = class AddEditComponent {\n  constructor(formBuilder, route, router, accountService, alertService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.accountService = accountService;\n    this.alertService = alertService;\n    this.loading = false;\n    this.submitting = false;\n    this.submitted = false;\n  }\n  ngOnInit() {\n    this.id = this.route.snapshot.params['id'];\n    this.form = this.formBuilder.group({\n      title: ['', Validators.required],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, Validators.email]],\n      role: ['', Validators.required],\n      // password only required in add mode\n      password: ['', [Validators.minLength(6), ...(!this.id ? [Validators.required] : [])]],\n      confirmPassword: ['']\n    }, {\n      validator: MustMatch('password', 'confirmPassword')\n    });\n    this.title = 'Create Account';\n    if (this.id) {\n      // edit mode\n      this.title = 'Edit Account';\n      this.loading = true;\n      this.accountService.getById(this.id).pipe(first()).subscribe(x => {\n        this.form.patchValue(x);\n        this.loading = false;\n      });\n    }\n  }\n  // convenience getter for easy access to form fields\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    // reset alerts on submit\n    this.alertService.clear();\n    // stop here if form is invalid\n    if (this.form.invalid) {\n      return;\n    }\n    this.submitting = true;\n    // create or update account based on id param\n    let saveAccount;\n    let message;\n    if (this.id) {\n      saveAccount = () => this.accountService.update(this.id, this.form.value);\n      message = 'Account updated';\n    } else {\n      saveAccount = () => this.accountService.create(this.form.value);\n      message = 'Account created';\n    }\n    saveAccount().pipe(first()).subscribe({\n      next: () => {\n        this.alertService.success(message, {\n          keepAfterRouteChange: true\n        });\n        this.router.navigateByUrl('/admin/accounts');\n      },\n      error: error => {\n        this.alertService.error(error);\n        this.submitting = false;\n      }\n    });\n  }\n};\nAddEditComponent = __decorate([Component({\n  templateUrl: 'add-edit.component.html'\n})], AddEditComponent);\nexport { AddEditComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}